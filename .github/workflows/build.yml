name: JMH CI

env:
  GITHUB_DEPLOY: 'true'

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - LICENSE
      - README.md

  pull_request:
    branches:
      - main

  schedule:
    - cron: "0 0 * * *"

  workflow_dispatch:

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Run JMH Benchmark.
    timeout-minutes: 15
    continue-on-error: false

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        jdk: [ 17 ]
        include:
          - os: ubuntu-latest
            cmd: ./mvnw
          - os: macos-latest
            cmd: ./mvnw
          - os: windows-latest
            cmd: ./mvnw.cmd

    outputs:
      sha-version: ${{ steps.sha-version.outputs.version }}

    steps:
      - name: Check out the source code
        uses: actions/checkout@v2

      - name: Download OpenJDK ${{ matrix.jdk }}
        id: download-jdk
        uses: sormuras/download-jdk@v1
        with:
          feature: ${{ matrix.jdk }}

      - name: Download OpenJDK (fallback)
        if: ${{ false }}
        run: |
          download_url="https://download.java.net/java/early_access/loom/7/openjdk-17-loom+7-342_macos-x64_bin.tar.gz"
          wget -O $RUNNER_TEMP/java_package.tar.gz $download_url

      - name: Set up OpenJDK ${{ matrix.jdk }}
        id: setup-java
        uses: actions/setup-java@v2
        if: always() && steps.download-jdk.outcome == 'success'
        with:
          distribution: jdkfile
          java-version: ${{ env.JDK_VERSION }}
          jdkFile: ${{ env.JDK_FILE }}
        # jdkFile: ${{ runner.temp }}/java_package.tar.gz

      - name: Print Env
        shell: bash
        run: |
          echo "steps.download-jdk.outputs.file    = ${{ steps.download-jdk.outputs.file }}"
          echo "steps.download-jdk.outputs.version = ${{ steps.download-jdk.outputs.version }}"
          echo "steps.setup-java.outputs.path      = ${{ steps.setup-java.outputs.path }}"
          echo "env.JDK_FILE                       = ${{ env.JDK_FILE }}"
          echo "env.JDK_VERSION                    = ${{ env.JDK_VERSION }}"
          echo "GITHUB_ENV                         = $GITHUB_ENV"
          echo "GITHUB_PATH                        = $GITHUB_PATH"
          echo "JAVA_HOME                          = $JAVA_HOME"
          echo "JAVA_HOME_11                       = $JAVA_HOME_11_X64"
          # echo "JAVA_HOME=$JAVA_HOME_11_X64" >> $GITHUB_ENV
          # echo "$JAVA_HOME_11_X64/bin" >> $GITHUB_PATH

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Create Version Number
        id: sha-version
        shell: bash
        run: |
          SHA_VERSION=$(echo $GITHUB_SHA | cut -c1-7)
          echo "::set-output name=version::$SHA_VERSION"

      - name: Maven Build
        shell: bash
        run: ./mvnw verify

      - name: Deploy to GitHub Packages (Linux)
        if: env.GITHUB_DEPLOY == 'true' && runner.os == 'Linux'
        run: |
          ./mvnw --settings .mvn/settings.xml clean deploy
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run JMH Benchmark
        if: success()
        shell: bash
        run: |
          java -jar target/benchmarks.jar -rf json -rff jmh-result-${{ matrix.os }}.json
          # mkdir staging && cp {$result_file,target/benchmarks.jar} staging

      - name: Uploading JMH ${{ matrix.os }} benchmark results
        uses: actions/upload-artifact@v2
        with:
          name: jmh-result-${{ matrix.os }}.json
          path: |
            *.json
          if-no-files-found: error

      - name: Uploading JMH ${{ matrix.os }} benchmark jar
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: benchmarks-${{ matrix.os }}.jar
          path: |
            target/benchmarks.jar
          if-no-files-found: error

  release:
    name: Release new version.
    needs: [ build ]
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest

    steps:
      - name: check
        shell: bash
        run: |
          echo "The SHA version from build job: ${{ needs.build.outputs.sha-version }}"