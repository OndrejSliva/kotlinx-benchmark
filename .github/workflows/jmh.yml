name: JMH CI

env:
  GITHUB_DEPLOY: 'true'

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - LICENSE
      - README.md

  pull_request:
    branches:
      - main

  schedule:
    - cron: "0 0 * * *"

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Run JMH Benchmark.
    timeout-minutes: 15
    continue-on-error: false

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        jdk: [ 17 ]
    outputs:
      sha-version: ${{ steps.sha-version.outputs.version }}

    steps:
      - name: Check out the source code
        uses: actions/checkout@v2

      - name: Print Env
        shell: bash
        run: |
          echo "steps.download-jdk.outputs.file    = ${{ steps.download-jdk.outputs.file }}"
          echo "steps.download-jdk.outputs.version = ${{ steps.download-jdk.outputs.version }}"
          echo "env.JDK_FILE                       = ${{ env.JDK_FILE }}"
          echo "env.JDK_VERSION                    = ${{ env.JDK_VERSION }}"
          echo "GITHUB_ENV                         = $GITHUB_ENV"
          echo "GITHUB_PATH                        = $GITHUB_PATH"
          echo "JAVA_HOME                          = $JAVA_HOME_11_X64"
          # echo "JAVA_HOME=$JAVA_HOME_11_X64" >> $GITHUB_ENV
          # echo "$JAVA_HOME_11_X64/bin" >> $GITHUB_PATH

      - name: Download JDK ${{ matrix.jdk }}
        id: download-jdk
        uses: sormuras/download-jdk@v1
        with:
          feature: ${{ matrix.jdk }}

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v2
        with:
          distribution: jdkfile
          java-version: ${{ env.JDK_VERSION }}
          jdkFile: ${{ env.JDK_FILE }}

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Create Version Number
        id: sha-version
        shell: bash
        run: |
          SHA_VERSION=$(echo $GITHUB_SHA | cut -c1-7)
          echo "::set-output name=version::$SHA_VERSION"

      - name: Maven Build
        shell: bash
        run: ./mvnw -B -U verify

      - name: Deploy to GitHub Packages (Linux)
        if: env.GITHUB_DEPLOY == 'true' && runner.os == 'Linux'
        run: |
          ./mvnw --settings .mvn/settings.xml clean deploy
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run JMH Benchmark
        if: success()
        shell: bash
        run: |
          java -jar target/benchmarks.jar
          mkdir staging && cp target/benchmarks.jar staging

      - uses: actions/upload-artifact@v2.2.3
        if: env.GITHUB_DEPLOY != 'true'
        with:
          name: Package
          path: staging


  release:
    name: Release new version.
    needs: [ build ]
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ${{ matrix.os }}

    steps:
      - name: check
        shell: bash
        run: |
          echo "The SHA version from build job: ${{ needs.build.outputs.sha-version }}"
       

       
